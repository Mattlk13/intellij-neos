/*
 *  IntelliJ IDEA plugin to support the Neos CMS.
 *  Copyright (C) 2016  Christian Vette
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        maven { url 'https://dl.bintray.com/jetbrains/intellij-plugin-service' }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "com.github.hurricup:gradle-grammar-kit-plugin:2017.1.1"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.2.15"
}

import org.jetbrains.grammarkit.tasks.*

// See http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html
// and https://plugins.jetbrains.com/plugin/6610-php
def pluginsForIdeaVersion = [
    'LATEST-EAP-SNAPSHOT': [
        // Branch Number: 172
        'com.jetbrains.php:172.2465.7',
        'yaml',

        // test dependencies
        'CSS',
        'java-i18n',
        'properties'
    ],
    '2017.2': [
        // Branch Number: 172
        'com.jetbrains.php:172.3317.83',
        'yaml',
        'IntelliLang',

        // test dependencies
        'CSS',
        'java-i18n',
        'properties',
        // DEV dependencies: UNCOMMENT the following lines during development
        // to install additional plugins for development
        'PsiViewer:3.28.93'
    ],
    '2017.1.3': [
        // Branch Number: 171
        'com.jetbrains.php:171.4424.11',
        'yaml',

        // test dependencies
        'CSS',
        'java-i18n',
        'properties'
    ],
    '2016.3.5': [
        // Branch Number: 163
        'com.jetbrains.php:163.10504.2',
        'yaml',

        // test dependencies
        'CSS',
        'java-i18n',
        'properties'
    ],
    '2016.2.5': [
        // Branch Number: 162
        'com.jetbrains.php:162.1121.34',
        'yaml',

        // test dependencies
        'CSS',
        'java-i18n',
        'properties'
    ],
    '2016.1.4': [
        // Branch Number: 145
        'com.jetbrains.php:145.970.40',
        'yaml',

        // test dependencies
        'CSS',
        'java-i18n',
        'properties'
    ]
]


apply plugin: 'idea'
idea {
    module {
        generatedSourceDirs += file('src/gen')
    }
}

apply plugin: 'org.jetbrains.intellij'
intellij {
    version ideaVersion
    pluginName 'neos-intellij-plugin'
    updateSinceUntilBuild false
    instrumentCode = false
    downloadSources Boolean.valueOf(downloadIdeaSources)
    type = 'IU'
    plugins = pluginsForIdeaVersion[ideaVersion]
}

apply plugin: 'java'
version "$version-$buildNumber"
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
sourceSets {
    main {
        java.srcDirs += 'src/gen'
    }
}

apply plugin: 'org.jetbrains.grammarkit'
grammarKit {
    jflexRelease = '1.7.0'
    grammarKitRelease = '1.5.2'
}

test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
        showStackTraces true
    }

    beforeSuite { suite ->
        if (suite.className != null) {
            println()
            println(suite.className)
        }
    }
    afterTest { desc, result ->
        def c = '.'
        if (result.resultType == TestResult.ResultType.FAILURE) {
            c = 'X'
        } else if (result.resultType == TestResult.ResultType.SKIPPED) {
            c = 'S'
        }
        print(c)
        System.out.flush()
    }
    afterSuite { println() }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

task generateFusionLexer(type: GenerateLexer) {
    source = 'src/main/grammars/FusionLexer.flex'
    targetDir = 'src/gen/de/vette/idea/neos/lang/fusion/parser'
    targetClass = 'FusionLexer'
    purgeOldFiles = true
}

task generateFusionParser(type: GenerateParser) {
    source = 'src/main/grammars/FusionParser.bnf'
    targetRoot = 'src/gen'
    pathToParser = 'src/gen/de/vette/idea/neos/lang/fusion/parser/FusionParser.java'
    pathToPsiRoot = '/de/vette/idea/neos/lang/core/psi'
    purgeOldFiles = true
}

compileJava.dependsOn generateFusionLexer, generateFusionParser
compileTestJava.dependsOn generateFusionLexer, generateFusionParser